import React, { useState, useEffect, useMemo } from 'react';
import Papa from 'papaparse';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Search, BookOpen, TrendingUp, ChevronRight, X, Loader, FileText, ArrowUpDown, BarChart2, PieChart } from 'lucide-react';

// ===================================================================================
// UTILITY FUNCTIONS
// ===================================================================================
const fetchAndParseCSV = (filePath) => { return new Promise((resolve, reject) => { Papa.parse(filePath, { download: true, header: true, skipEmptyLines: true, complete: (results) => { if (results.errors.length) console.warn(`Errors parsing ${filePath}:`, results.errors); const lowercasedData = results.data.map(row => { const newRow = {}; for (const key in row) { if (Object.prototype.hasOwnProperty.call(row, key)) { newRow[key.trim().toLowerCase()] = row[key]; } } if (newRow.frequency || newRow.freq) { newRow.frequency = parseInt(newRow.frequency || newRow.freq, 10) || 0; delete newRow.freq; } return newRow; }); resolve(lowercasedData); }, error: (error) => reject(error) }); }); };
const parseFileName = (filename) => { const match = filename.match(/^([A-Z]+)(\d+[a-z]?)_([A-Z]+)\.csv$/); if (match) { const [, childName, ageSession, speakerCode] = match; let ageInfo = ageSession; let ageInDays = 0; const ageMatch = ageSession.match(/^(\d)(\d{2})(\d{2})([a-z]?)$/); if (ageMatch) { const [, years, months, days, suffix] = ageMatch; ageInfo = `${years}y${parseInt(months, 10)}m${parseInt(days, 10)}d${suffix}`; ageInDays = parseInt(years, 10) * 365 + parseInt(months, 10) * 30 + parseInt(days, 10); } const speakerMap = { 'CHI': 'Child', 'MOT': 'Mother', 'REL': 'Relative', 'CHA': 'Caregiver' }; const speakerType = speakerMap[speakerCode] || speakerCode; return { filename, participant: childName, session: ageSession, ageInfo, ageInDays, speaker: speakerType, speakerCode, isChild: speakerCode === 'CHI', fullLabel: `${childName} (${speakerType}) - ${ageInfo}` }; } return { filename, participant: 'Unknown', speaker: 'Unknown', session: filename, ageInDays: 0 }; };
const getChildColor = (childName) => { const PREDEFINED_COLORS = { 'ALE': '#3b82f6', 'ANA': '#ef4444', 'GAB': '#10b981', 'MAT': '#f59e0b' }; const FALLBACK_COLORS = ['#8b5cf6', '#ec4899', '#64748b']; if (PREDEFINED_COLORS[childName]) return PREDEFINED_COLORS[childName]; const charCodeSum = childName.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0); return FALLBACK_COLORS[charCodeSum % FALLBACK_COLORS.length]; };
const POS_COLORS = { 'NOUN': '#1f77b4', 'VERB': '#ff7f0e', 'ADJ': '#2ca02c', 'ADV': '#d62728', 'PRON': '#9467bd', 'ADP': '#8c564b', 'CONJ': '#e377c2', 'DET': '#7f7f7f', 'NUM': '#bcbd22', 'INTJ': '#17becf', 'PART': '#98df8a' };

// ===================================================================================
// UI COMPONENTS
// ===================================================================================
const LoadingView = () => ( <div className="h-full flex flex-col justify-center items-center text-center p-8 bg-gray-50"><Loader size={48} className="text-indigo-500 animate-spin mb-4" /><h2 className="text-xl font-semibold text-gray-700">Loading & Analyzing Corpus...</h2></div>);
const WelcomeView = ({ stats, fileCount }) => ( <div className="h-full flex flex-col justify-center items-center text-center p-8 bg-gray-50"><BookOpen size={48} className="text-gray-300 mb-4" /><h2 className="text-2xl font-semibold text-gray-700">Georgian Child Corpus Explorer</h2><p className="text-gray-500 max-w-md mt-2 mb-6">Use the controls on the left to search the corpus, or click the stats buttons in the header for detailed analysis.</p>{stats && ( <div className="grid grid-cols-2 gap-x-8 gap-y-4 text-left p-6 border rounded-lg bg-white shadow-sm"><div className="font-semibold text-gray-600">Files Loaded:</div><div className="text-gray-900 font-mono">{fileCount}</div><div className="font-semibold text-gray-600">Total Word Tokens:</div><div className="text-gray-900 font-mono">{stats.totalTokens.toLocaleString()}</div><div className="font-semibold text-gray-600">Unique Words (Types):</div><div className="text-gray-900 font-mono">{stats.uniqueWords.toLocaleString()}</div><div className="font-semibold text-gray-600">Unique Lemmas:</div><div className="text-gray-900 font-mono">{stats.uniqueLemmas.toLocaleString()}</div></div>)}</div>);
const FilterSection = ({ title, options, selected, onToggle, onSelectAll, onDeselectAll }) => ( <div className="mb-4"><div className="flex justify-between items-center mb-1"><h4 className="text-xs font-semibold text-gray-500 uppercase tracking-wider">{title}</h4><div><button onClick={onSelectAll} className="text-xs text-indigo-600 hover:text-indigo-800 font-medium mr-2">All</button><button onClick={onDeselectAll} className="text-xs text-gray-500 hover:text-gray-700 font-medium">None</button></div></div><div className="space-y-1 text-sm">{options.map(option => ( <label key={option} className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" checked={selected.includes(option)} onChange={() => onToggle(option)} className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" /><span>{option}</span></label>))}</div></div>);
const ControlPanel = ({searchTerm, setSearchTerm, searchBy, setSearchBy, filters, setFilters, availableFiles, selectedFiles, setSelectedFiles}) => { const allParticipants = useMemo(() => [...new Set(availableFiles.map(f => f.participant))], [availableFiles]); const allSpeakers = useMemo(() => [...new Set(availableFiles.map(f => f.speaker))], [availableFiles]); const handleFilterChange = (type, value) => { setFilters(prev => ({...prev, [type]: prev[type].includes(value) ? prev[type].filter(v => v !== value) : [...prev[type], value]})); }; return ( <div className="p-4 border-r border-gray-200 bg-gray-50/50 flex flex-col h-full overflow-y-auto"><div className="relative mb-4"><Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} /><input type="text" placeholder="Search..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" /></div><div className="mb-6"><h3 className="text-sm font-semibold text-gray-600 mb-2">Search By</h3><div className="flex flex-wrap gap-x-4 gap-y-2 text-sm">{['Word', 'Lemma', 'Morphemes', 'Gloss'].map(option => ( <label key={option} className="flex items-center space-x-2 cursor-pointer"><input type="radio" name="searchBy" value={option} checked={searchBy === option} onChange={(e) => setSearchBy(e.target.value)} className="h-4 w-4 text-indigo-600 border-gray-300 focus:ring-indigo-500" /><span>{option}</span></label>))}</div></div><FilterSection title="Participants" options={allParticipants} selected={filters.participants} onToggle={(val) => handleFilterChange('participants', val)} onSelectAll={() => setFilters(f => ({ ...f, participants: allParticipants }))} onDeselectAll={() => setFilters(f => ({ ...f, participants: [] }))} /><FilterSection title="Speakers" options={allSpeakers} selected={filters.speakers} onToggle={(val) => handleFilterChange('speakers', val)} onSelectAll={() => setFilters(f => ({ ...f, speakers: allSpeakers }))} onDeselectAll={() => setFilters(f => ({ ...f, speakers: [] }))} /></div>); };
const DevelopmentalChart = ({ data, yAxisKey, yAxisLabel, childName, color }) => { const CustomTooltip = ({ active, payload, label }) => { if (active && payload && payload.length) { return ( <div className="bg-white/80 backdrop-blur-sm border border-gray-200 rounded-lg shadow-lg p-3 text-sm"><p className="font-bold mb-2">{`Age: ${label}`}</p>{payload.map((entry, index) => ( <p key={index} style={{ color: entry.color }} className="font-medium">{entry.name === 'Child' ? `${childName} (Child): ${entry.value.toFixed(2)}` : `Adults: ${entry.value.toFixed(2)}`}</p>))}</div>); } return null; }; return ( <div className="mb-8 border border-gray-200 rounded-lg p-4 bg-white shadow-sm"><h4 className="text-lg font-semibold text-gray-700 mb-3 flex items-center"><span className="inline-block w-4 h-4 rounded mr-2" style={{ backgroundColor: color }}></span>{childName} - {yAxisLabel} Timeline</h4><div style={{ width: '100%', height: 350 }}><ResponsiveContainer><LineChart data={data} margin={{ top: 5, right: 20, left: 10, bottom: 50 }}><CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" /><XAxis dataKey="ageLabel" angle={-45} textAnchor="end" height={60} fontSize={12} stroke="#666" interval="preserveStartEnd" /><YAxis dataKey={yAxisKey} domain={[0, 'auto']} fontSize={12} stroke="#666" label={{ value: yAxisLabel, angle: -90, position: 'insideLeft', offset: -5 }} /><Tooltip content={<CustomTooltip />} /><Legend /><Line type="monotone" dataKey="child" name="Child" stroke={color} strokeWidth={3} dot={{ r: 4 }} activeDot={{ r: 6 }} /><Line type="monotone" dataKey="adults" name="Adults" stroke="#6b7280" strokeWidth={2} strokeDasharray="5 5" /></LineChart></ResponsiveContainer></div></div>); };
const DetailView = ({ item, onClose, frequencyData }) => { const chartDataByChild = useMemo(() => { if (!frequencyData) return {}; const groups = {}; frequencyData.forEach(entry => { if (!groups[entry.participant]) groups[entry.participant] = []; groups[entry.participant].push(entry); }); const childChartData = {}; for (const childName in groups) { const sessionGroups = {}; groups[childName].forEach(entry => { const sessionKey = entry.ageInfo; if (!sessionGroups[sessionKey]) { const ageMatch = entry.ageInfo.match(/^(\d+)y(\d+)m/); sessionGroups[sessionKey] = { ageInfo: sessionKey, ageInDays: entry.ageInDays, ageLabel: ageMatch ? `${ageMatch[1]}y ${ageMatch[2]}m` : entry.ageInfo, child: 0, adults: 0 }; } if (entry.isChild) sessionGroups[sessionKey].child += entry.frequency; else sessionGroups[sessionKey].adults += entry.frequency; }); childChartData[childName] = Object.values(sessionGroups).sort((a, b) => a.ageInDays - b.ageInDays); } return childChartData; }, [frequencyData]); return ( <div className="h-full overflow-y-auto p-6 bg-gray-50 relative"><button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-gray-800" aria-label="Close details"><X size={24} /></button><div className="mb-8 p-6 bg-white rounded-lg shadow-sm border border-gray-200"><h2 className="text-3xl font-bold text-gray-900">{item.word}</h2><p className="text-lg text-gray-600 mt-1">{item.gloss}</p><div className="mt-4 grid grid-cols-2 gap-x-4 gap-y-2 text-sm"><p className="text-gray-500">Lemma: <span className="font-semibold text-gray-700">{item.lemma || 'N/A'}</span></p><p className="text-gray-500">POS: <span className="font-semibold text-gray-700">{item.pos || 'N/A'}</span></p></div>{item.morphemes && ( <div className="mt-4"><p className="text-sm text-gray-500 mb-1">Morphemes:</p><div className="font-mono text-sm bg-gray-100 p-2 rounded">{item.morphemes}</div></div>)}</div>{Object.keys(chartDataByChild).map(childName => ( <DevelopmentalChart key={childName} childName={childName} data={chartDataByChild[childName]} yAxisKey="child" yAxisLabel="Frequency" color={getChildColor(childName)} />))}</div>); };
const ResultsList = ({ groupedResults, totalCount, onSelectItem }) => { const sortedGroups = Object.entries(groupedResults).sort(([, occurrencesA], [, occurrencesB]) => { const freqA = occurrencesA.reduce((sum, item) => sum + item.frequency, 0); const freqB = occurrencesB.reduce((sum, item) => sum + item.frequency, 0); return freqB - freqA; }); return ( <div className="flex flex-col h-full bg-white"><div className="p-4 border-b border-gray-200 bg-gray-50"><p className="text-sm text-gray-600 font-semibold">Found {totalCount.toLocaleString()} occurrences across {sortedGroups.length} word form(s)</p></div><div className="overflow-y-auto">{totalCount > 0 ? ( <div>{sortedGroups.map(([word, occurrences]) => { const totalFrequency = occurrences.reduce((sum, item) => sum + item.frequency, 0); const uniqueSessionKeys = new Set(occurrences.map(item => `${item.participant}_${item.session}`)); const sessionCount = uniqueSessionKeys.size; return ( <details key={word} className="group border-b border-gray-200" open={sortedGroups.length < 5}> <summary className="flex items-center justify-between p-4 cursor-pointer hover:bg-gray-100 list-none"><div className="font-semibold text-indigo-800">{word}</div><div className="flex items-center space-x-4 text-sm"><span className="text-gray-600">{sessionCount} {sessionCount > 1 ? 'sessions' : 'session'}</span><span className="bg-gray-200 text-gray-800 font-bold text-xs px-2 py-1 rounded-full">Freq: {totalFrequency}</span><ChevronRight className="text-gray-400 group-open:rotate-90 transition-transform" size={20} /></div></summary><ul className="bg-gray-50/50">{occurrences.map((item) => ( <li key={item.occurrenceId}><button onClick={() => onSelectItem(item)} className="w-full text-left p-3 pl-8 border-t border-gray-200 hover:bg-indigo-50"><div className="flex justify-between items-center"><div className="flex items-center space-x-2 text-xs"><span className="bg-gray-200 text-gray-700 px-2 py-0.5 rounded-full font-medium">{item.participant}</span><span className={`px-2 py-0.5 rounded-full font-medium ${item.isChild ? 'bg-blue-100 text-blue-700' : 'bg-green-100 text-green-700'}`}>{item.speaker}</span><span className="text-gray-500">{item.ageInfo}</span></div><span className="text-sm font-semibold text-gray-700">Freq: {item.frequency}</span></div></button></li>))}</ul></details> ); })}</div>) : ( <div className="p-8 text-center text-gray-500 flex flex-col items-center justify-center h-full"><FileText size={40} className="text-gray-300 mb-4" /><p className="font-semibold">No Occurrences Found</p></div>)}</div></div>); };
const StatsView = ({ title, data, chartComponent, tableComponent, onClose }) => ( <div className="h-full flex flex-col p-6 bg-gray-50 overflow-y-auto"><div className="flex justify-between items-center mb-6 shrink-0"><h2 className="text-2xl font-bold text-gray-800">{title}</h2><button onClick={onClose} className="text-gray-500 hover:text-gray-800"><X size={24} /></button></div><div className="overflow-y-auto"> {chartComponent} {tableComponent} </div></div>);

// NEW: MLV Stats Components
const MLVCharts = ({ mlvData }) => { const chartDataByChild = useMemo(() => { const groups = {}; mlvData.forEach(entry => { if (!groups[entry.participant]) groups[entry.participant] = []; groups[entry.participant].push(entry); }); const childChartData = {}; for (const childName in groups) { const sessionGroups = {}; groups[childName].forEach(entry => { const sessionKey = entry.ageInfo; if (!sessionGroups[sessionKey]) { const ageMatch = entry.ageInfo.match(/^(\d+)y(\d+)m/); sessionGroups[sessionKey] = { ageInfo: sessionKey, ageInDays: entry.ageInDays, ageLabel: ageMatch ? `${ageMatch[1]}y ${ageMatch[2]}m` : entry.ageInfo, child: 0, adults: 0, childCount: 0, adultCount: 0, }; } if (entry.isChild) { sessionGroups[sessionKey].child += entry.mlv; sessionGroups[sessionKey].childCount++; } else { sessionGroups[sessionKey].adults += entry.mlv; sessionGroups[sessionKey].adultCount++; } }); Object.values(sessionGroups).forEach(group => { if (group.childCount > 0) group.child /= group.childCount; if (group.adultCount > 0) group.adults /= group.adultCount; }); childChartData[childName] = Object.values(sessionGroups).sort((a, b) => a.ageInDays - b.ageInDays); } return childChartData; }, [mlvData]); return <>{Object.keys(chartDataByChild).map(childName => <DevelopmentalChart key={childName} childName={childName} data={chartDataByChild[childName]} yAxisKey="child" yAxisLabel="MLV" color={getChildColor(childName)} />)}</>; };
const MLVTable = ({ data }) => { const [sortConfig, setSortConfig] = useState({ key: 'ageInDays', direction: 'ascending' }); const sortedData = useMemo(() => { let sortableItems = [...data]; sortableItems.sort((a, b) => { if (a[sortConfig.key] < b[sortConfig.key]) return sortConfig.direction === 'ascending' ? -1 : 1; if (a[sortConfig.key] > b[sortConfig.key]) return sortConfig.direction === 'ascending' ? 1 : -1; return 0; }); return sortableItems; }, [data, sortConfig]); const requestSort = key => { let direction = 'ascending'; if (sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending'; setSortConfig({ key, direction }); }; const getSortIcon = key => { if (sortConfig.key !== key) return <ArrowUpDown size={14} className="ml-2 opacity-30" />; return sortConfig.direction === 'ascending' ? '▲' : '▼'; }; return ( <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200"><h3 className="text-lg font-semibold text-gray-700 mb-4">MLV per Session</h3><table className="min-w-full divide-y divide-gray-200 text-sm"><thead><tr>{['participant', 'speaker', 'ageInfo', 'mlv', 'totalVerbTokens'].map(key => <th key={key} onClick={() => requestSort(key)} className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"><span className="flex items-center">{key === 'ageInfo' ? 'Age' : key.replace(/([A-Z])/g, ' $1')}{getSortIcon(key)}</span></th>)}</tr></thead><tbody className="bg-white divide-y divide-gray-200">{sortedData.map((item, index) => <tr key={`${item.filename}-${index}`} className="hover:bg-gray-50"><td className="px-4 py-2">{item.participant}</td><td className="px-4 py-2">{item.speaker}</td><td className="px-4 py-2 font-mono">{item.ageInfo}</td><td className="px-4 py-2 font-semibold">{item.mlv > 0 ? item.mlv.toFixed(2) : 'N/A'}</td><td className="px-4 py-2">{item.totalVerbTokens}</td></tr>)}</tbody></table></div>); };

// NEW: POS Stats Components
const POSCharts = ({ posData }) => { const allPosTags = useMemo(() => [...new Set(posData.flatMap(d => Object.keys(d.posPercentages)))].sort(), [posData]); const chartDataByChild = useMemo(() => { const groups = {}; posData.forEach(entry => { if (!groups[entry.participant]) groups[entry.participant] = []; groups[entry.participant].push(entry); }); const childChartData = {}; for (const childName in groups) { const sessionGroups = {}; groups[childName].forEach(entry => { if(entry.isChild) { const ageMatch = entry.ageInfo.match(/^(\d+)y(\d+)m/); sessionGroups[entry.session] = { ageLabel: ageMatch ? `${ageMatch[1]}y ${ageMatch[2]}m` : entry.ageInfo, ageInDays: entry.ageInDays, ...entry.posPercentages }; } }); childChartData[childName] = Object.values(sessionGroups).sort((a, b) => a.ageInDays - b.ageInDays); } return childChartData; }, [posData]); return <>{Object.keys(chartDataByChild).map(childName => <div key={childName} className="mb-8 border border-gray-200 rounded-lg p-4 bg-white shadow-sm"><h4 className="text-lg font-semibold text-gray-700 mb-3 flex items-center"><span className="inline-block w-4 h-4 rounded mr-2" style={{ backgroundColor: getChildColor(childName) }}></span>{childName} - POS Distribution Timeline</h4><div style={{ width: '100%', height: 350 }}><ResponsiveContainer><BarChart data={chartDataByChild[childName]} layout="vertical" margin={{ top: 5, right: 30, left: 20, bottom: 20 }}><CartesianGrid strokeDasharray="3 3" /><XAxis type="number" domain={[0, 100]} unit="%" /><YAxis type="category" dataKey="ageLabel" width={80} /><Tooltip formatter={(value) => `${value.toFixed(1)}%`} /><Legend />{allPosTags.map(tag => <Bar key={tag} dataKey={tag} stackId="a" fill={POS_COLORS[tag] || '#ccc'} name={tag} />)}</BarChart></ResponsiveContainer></div></div>)}</>; };
const POSTable = ({ data }) => { const [sortConfig, setSortConfig] = useState({ key: 'ageInDays', direction: 'ascending' }); const allPosTags = useMemo(() => [...new Set(data.flatMap(d => Object.keys(d.posPercentages)))].sort(), [data]); const sortedData = useMemo(() => { let sortableItems = [...data]; sortableItems.sort((a, b) => { const valA = sortConfig.key.startsWith('pos_') ? a.posPercentages[sortConfig.key.slice(4)] || 0 : a[sortConfig.key]; const valB = sortConfig.key.startsWith('pos_') ? b.posPercentages[sortConfig.key.slice(4)] || 0 : b[sortConfig.key]; if (valA < valB) return sortConfig.direction === 'ascending' ? -1 : 1; if (valA > valB) return sortConfig.direction === 'ascending' ? 1 : -1; return 0; }); return sortableItems; }, [data, sortConfig]); const requestSort = key => { let direction = 'ascending'; if (sortConfig.key === key && sortConfig.direction === 'ascending') direction = 'descending'; setSortConfig({ key, direction }); }; const getSortIcon = key => { if (sortConfig.key !== key) return <ArrowUpDown size={14} className="ml-2 opacity-30" />; return sortConfig.direction === 'ascending' ? '▲' : '▼'; }; return ( <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200"><h3 className="text-lg font-semibold text-gray-700 mb-4">POS Distribution (%) per Session</h3><table className="min-w-full divide-y divide-gray-200 text-sm"><thead><tr>{['participant', 'speaker', 'ageInfo'].map(key => <th key={key} onClick={() => requestSort(key)} className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"><span className="flex items-center">{key.replace('ageInfo','Age')}{getSortIcon(key)}</span></th>)}{allPosTags.map(tag => <th key={tag} onClick={() => requestSort(`pos_${tag}`)} className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"><span className="flex items-center">{tag}{getSortIcon(`pos_${tag}`)}</span></th>)}</tr></thead><tbody className="bg-white divide-y divide-gray-200">{sortedData.map((item, index) => <tr key={`${item.filename}-${index}`} className="hover:bg-gray-50"><td className="px-3 py-2">{item.participant}</td><td className="px-3 py-2">{item.speaker}</td><td className="px-3 py-2 font-mono">{item.ageInfo}</td>{allPosTags.map(tag => <td key={tag} className="px-3 py-2 text-right">{item.posPercentages[tag] ? item.posPercentages[tag].toFixed(1) : '0.0'}</td>)}</tr>)}</tbody></table></div>); };

// ===================================================================================
// MAIN APP COMPONENT
// ===================================================================================
export default function CorpusDataApp() {
  const [corpusData, setCorpusData] = useState([]);
  const [corpusStats, setCorpusStats] = useState(null);
  const [mlvDataByFile, setMlvDataByFile] = useState([]);
  const [posDataByFile, setPosDataByFile] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeView, setActiveView] = useState('explorer');
  const [searchTerm, setSearchTerm] = useState('');
  const [searchBy, setSearchBy] = useState('Word');
  const [selectedItem, setSelectedItem] = useState(null);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [filters, setFilters] = useState({ participants: [], speakers: [] });

  useEffect(() => {
    const loadAndAnalyzeCorpus = async () => {
      try {
        setLoading(true);
        const vocabData = await fetchAndParseCSV('/vocabulary.csv');
        const vocabularyMap = new Map();
        vocabData.forEach(item => { if (item.word) { vocabularyMap.set(item.word, { lemma: item.lemma, pos: item.pos, gloss: item.gloss, morphemes: item.morphemes }); } });
        const manifestResponse = await fetch('/manifest.json');
        if (!manifestResponse.ok) throw new Error('Could not load manifest.json');
        const { files: speakerFiles } = await manifestResponse.json();
        const mlvResults = [], posResults = [];
        const dataPromises = speakerFiles.map(async (filename) => {
          try {
            const fileInfo = parseFileName(filename);
            const sessionData = await fetchAndParseCSV(`/${filename}`);
            let totalMorphemes = 0, totalVerbTokens = 0, totalTokens = 0;
            const posCounts = {};
            const enrichedData = sessionData.map(row => {
              const linguisticInfo = vocabularyMap.get(row.word) || {};
              const enrichedRow = { ...row, ...linguisticInfo };
              const freq = enrichedRow.frequency || 0;
              if (freq > 0) {
                totalTokens += freq;
                if (enrichedRow.pos) posCounts[enrichedRow.pos] = (posCounts[enrichedRow.pos] || 0) + freq;
                if (enrichedRow.pos === 'VERB' && enrichedRow.morphemes) {
                  totalVerbTokens += freq;
                  totalMorphemes += enrichedRow.morphemes.split('-').length * freq;
                }
              }
              return enrichedRow;
            });
            const mlv = totalVerbTokens > 0 ? totalMorphemes / totalVerbTokens : 0;
            mlvResults.push({ ...fileInfo, mlv, totalVerbTokens });
            const posPercentages = {};
            for(const pos in posCounts) posPercentages[pos] = (posCounts[pos] / totalTokens) * 100;
            posResults.push({ ...fileInfo, posPercentages, totalTokens });
            return { fileInfo, data: enrichedData };
          } catch (e) { console.warn(`Could not process file: ${filename}`, e); return null; }
        });
        const loadedData = (await Promise.all(dataPromises)).filter(Boolean);
        setCorpusData(loadedData);
        setMlvDataByFile(mlvResults);
        setPosDataByFile(posResults);
        const allEnrichedEntries = loadedData.flatMap(file => file.data);
        setCorpusStats({ totalTokens: allEnrichedEntries.reduce((sum, item) => sum + (item.frequency || 0), 0), uniqueWords: new Set(allEnrichedEntries.map(item => item.word)).size, uniqueLemmas: new Set(allEnrichedEntries.map(item => item.lemma)).size });
        const fileInfos = loadedData.map(d => d.fileInfo);
        setSelectedFiles(fileInfos.map(f => f.filename));
        setFilters({ participants: [...new Set(fileInfos.map(f => f.participant))], speakers: [...new Set(fileInfos.map(f => f.speaker))] });
      } catch (err) { setError(err.message); }
      finally { setLoading(false); }
    };
    loadAndAnalyzeCorpus();
  }, []);

  const availableFiles = useMemo(() => corpusData.map(cd => cd.fileInfo), [corpusData]);
  const filteredResults = useMemo(() => { const lowerSearchTerm = searchTerm.toLowerCase().trim(); if (!lowerSearchTerm) return { groups: {}, totalCount: 0 }; let allOccurrences = []; let activeData = corpusData.filter(({ fileInfo }) => selectedFiles.includes(fileInfo.filename) && (filters.participants.length === 0 || filters.participants.includes(fileInfo.participant)) && (filters.speakers.length === 0 || filters.speakers.includes(fileInfo.speaker))); const searchKey = searchBy.toLowerCase(); activeData.forEach(({ fileInfo, data }) => { data.forEach(item => { const searchField = item[searchKey] || ''; const isMatch = searchKey === 'lemma' ? searchField.toLowerCase() === lowerSearchTerm : searchField.toLowerCase().includes(lowerSearchTerm); if (isMatch) { allOccurrences.push({ ...item, ...fileInfo, occurrenceId: `${fileInfo.filename}-${item.word}-${Math.random()}` }); } }); }); const sortedOccurrences = allOccurrences.sort((a, b) => (b.frequency - a.frequency) || (a.ageInDays - b.ageInDays)); const grouped = {}; sortedOccurrences.forEach(item => { if (!grouped[item.word]) { grouped[item.word] = []; } grouped[item.word].push(item); }); return { groups: grouped, totalCount: allOccurrences.length }; }, [searchTerm, searchBy, corpusData, selectedFiles, filters]);
  const frequencyDataForDetail = useMemo(() => { if (!selectedItem) return []; const relevantOccurrences = []; corpusData.forEach(({ fileInfo, data }) => { const wordEntry = data.find(entry => entry.word === selectedItem.word); if (wordEntry && wordEntry.frequency > 0) { relevantOccurrences.push({ ...wordEntry, ...fileInfo }); } }); return relevantOccurrences.sort((a, b) => a.participant.localeCompare(b.participant) || a.ageInDays - b.ageInDays); }, [selectedItem, corpusData]);
  const handleSetExplorerView = () => { setSelectedItem(null); setActiveView('explorer'); };

  if (loading) return <LoadingView />;
  if (error) return <div className="p-6 text-red-600 font-bold text-center">Error: {error.toString()}</div>;

  const renderActiveView = () => {
    switch(activeView) {
      case 'mlv':
        return <StatsView title="MLV (Mean Length of Verb) Statistics" data={mlvDataByFile} chartComponent={<MLVCharts mlvData={mlvDataByFile} />} tableComponent={<MLVTable data={mlvDataByFile} />} onClose={handleSetExplorerView} />;
      case 'pos':
        return <StatsView title="POS (Part of Speech) Statistics" data={posDataByFile} chartComponent={<POSCharts posData={posDataByFile} />} tableComponent={<POSTable data={posDataByFile} />} onClose={handleSetExplorerView} />;
      case 'explorer':
      default:
        return (
          <div className="flex-grow flex flex-col md:flex-row overflow-hidden">
            <div className="w-full md:w-80 lg:w-96 shrink-0 h-full">
              <ControlPanel searchTerm={searchTerm} setSearchTerm={setSearchTerm} searchBy={searchBy} setSearchBy={setSearchBy} filters={filters} setFilters={setFilters} availableFiles={availableFiles} selectedFiles={selectedFiles} setSelectedFiles={setSelectedFiles} />
            </div>
            <main className="flex-grow h-full bg-white overflow-hidden">
              {selectedItem ? (
                <DetailView item={selectedItem} onClose={() => setSelectedItem(null)} frequencyData={frequencyDataForDetail} />
              ) : searchTerm ? (
                <ResultsList groupedResults={filteredResults.groups} totalCount={filteredResults.totalCount} onSelectItem={setSelectedItem} />
              ) : (
                <WelcomeView stats={corpusStats} fileCount={availableFiles.length} />
              )}
            </main>
          </div>
        );
    }
  };

  return (
    <div className="h-screen w-screen bg-gray-100 font-sans flex flex-col">
      <header className="bg-white border-b border-gray-200 p-4 shrink-0 flex justify-between items-center">
        <h1 className="text-xl font-bold text-gray-800">Georgian Child Corpus Explorer</h1>
        <div className="flex space-x-2">
          <button onClick={handleSetExplorerView} className={`px-3 py-1.5 text-sm font-medium rounded-md flex items-center space-x-2 ${activeView === 'explorer' ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}><Search size={16} /><span>Explorer</span></button>
          <button onClick={() => setActiveView('mlv')} className={`px-3 py-1.5 text-sm font-medium rounded-md flex items-center space-x-2 ${activeView === 'mlv' ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}><BarChart2 size={16} /><span>MLV Stats</span></button>
          <button onClick={() => setActiveView('pos')} className={`px-3 py-1.5 text-sm font-medium rounded-md flex items-center space-x-2 ${activeView === 'pos' ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}><PieChart size={16} /><span>POS Stats</span></button>
        </div>
      </header>
      {renderActiveView()}
    </div>
  );
}
